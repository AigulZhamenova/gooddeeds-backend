const logger = require('../utils/logger'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä

const updateUserPointsAndLevel = async (userId, actionType) => {
  let pointsToAdd = 0;

  // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏–∏
  logger.info(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${actionType}`);

  switch (actionType) {
    case "eventParticipation":
      pointsToAdd = 10;
      break;
    case "donation":
      pointsToAdd = 5;
      break;
    case "createInitiative":
      pointsToAdd = 15;
      break;
    default:
      logger.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: ${actionType}`);
      return;
  }

  const user = await User.findById(userId);
  if (!user) {
    logger.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }

  user.points += pointsToAdd;

  // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
  if (user.points <= 30) {
    user.level = "–ù–æ–≤–∏—á–æ–∫ üê£";
  } else if (user.points <= 80) {
    user.level = "–ü–æ–º–æ—â–Ω–∏–∫ ü§ù";
  } else {
    user.level = "–ì–µ—Ä–æ–π üí™";
  }

  await user.save();
  logger.info(`–ë–∞–ª–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${user.points}, –£—Ä–æ–≤–µ–Ω—å: ${user.level}`);
};
